// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Matrix1.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MatrixTests")]
    public partial class MatrixTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MatrixTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MatrixTests", "\tIn order to avoid silly mistakes\r\n\tI want to test the matrix tools", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test the IsEqual method")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void TestTheIsEqualMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test the IsEqual method", new string[] {
                        "matrixTests"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table1.AddRow(new string[] {
                        "7",
                        "6"});
            table1.AddRow(new string[] {
                        "5",
                        "4"});
#line 7
 testRunner.Given("The following matrix", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table2.AddRow(new string[] {
                        "7",
                        "6"});
            table2.AddRow(new string[] {
                        "5",
                        "4"});
#line 11
 testRunner.And("another matrix", ((string)(null)), table2, "And ");
#line 15
 testRunner.When("I compare the matrices for equality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test the IsEqual method for inequality")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void TestTheIsEqualMethodForInequality()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test the IsEqual method for inequality", new string[] {
                        "matrixTests"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table3.AddRow(new string[] {
                        "7",
                        "6"});
            table3.AddRow(new string[] {
                        "5",
                        "4"});
#line 20
 testRunner.Given("The following matrix", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table4.AddRow(new string[] {
                        "7",
                        "6"});
            table4.AddRow(new string[] {
                        "5",
                        "3"});
#line 24
 testRunner.And("another matrix", ((string)(null)), table4, "And ");
#line 28
 testRunner.When("I compare the matrices for equality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("the result will be False", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test that a zero matrix can be recognised")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void TestThatAZeroMatrixCanBeRecognised()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test that a zero matrix can be recognised", new string[] {
                        "matrixTests"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table5.AddRow(new string[] {
                        "0",
                        "0"});
            table5.AddRow(new string[] {
                        "0",
                        "0"});
#line 33
 testRunner.Given("The following matrix", ((string)(null)), table5, "Given ");
#line 37
 testRunner.When("I compare the matrix to a zero matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test that a matrix can be recognised as not a NULL matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void TestThatAMatrixCanBeRecognisedAsNotANULLMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test that a matrix can be recognised as not a NULL matrix", new string[] {
                        "matrixTests"});
#line 41
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table6.AddRow(new string[] {
                        "1",
                        "0"});
            table6.AddRow(new string[] {
                        "0",
                        "0"});
#line 42
 testRunner.Given("The following matrix", ((string)(null)), table6, "Given ");
#line 46
 testRunner.When("I compare the matrix to a zero matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.Then("the result will be False", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test that an identity matrix can be recognised")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void TestThatAnIdentityMatrixCanBeRecognised()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test that an identity matrix can be recognised", new string[] {
                        "matrixTests"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table7.AddRow(new string[] {
                        "1",
                        "0"});
            table7.AddRow(new string[] {
                        "0",
                        "1"});
#line 51
 testRunner.Given("The following matrix", ((string)(null)), table7, "Given ");
#line 55
 testRunner.When("I compare the matrix to an identity matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test that a matrix can be recognised as not an identity matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void TestThatAMatrixCanBeRecognisedAsNotAnIdentityMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test that a matrix can be recognised as not an identity matrix", new string[] {
                        "matrixTests"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table8.AddRow(new string[] {
                        "1",
                        "0"});
            table8.AddRow(new string[] {
                        "0",
                        "0"});
#line 60
 testRunner.Given("The following matrix", ((string)(null)), table8, "Given ");
#line 64
 testRunner.When("I compare the matrix to an identity matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.Then("the result will be False", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Extract an element from the matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void ExtractAnElementFromTheMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extract an element from the matrix", new string[] {
                        "matrixTests"});
#line 68
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table9.AddRow(new string[] {
                        "7",
                        "6"});
            table9.AddRow(new string[] {
                        "5",
                        "4"});
            table9.AddRow(new string[] {
                        "3",
                        "2"});
#line 69
 testRunner.Given("The following matrix", ((string)(null)), table9, "Given ");
#line 74
 testRunner.When("I look-up element row 2, column 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("the result is 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transpose a matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void TransposeAMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transpose a matrix", new string[] {
                        "matrixTests"});
#line 78
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table10.AddRow(new string[] {
                        "7",
                        "6"});
            table10.AddRow(new string[] {
                        "5",
                        "4"});
            table10.AddRow(new string[] {
                        "3",
                        "2"});
#line 79
 testRunner.Given("The following matrix", ((string)(null)), table10, "Given ");
#line 84
 testRunner.When("I transpose the matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table11.AddRow(new string[] {
                        "7",
                        "5",
                        "3"});
            table11.AddRow(new string[] {
                        "6",
                        "4",
                        "2"});
#line 85
 testRunner.Then("the result should be", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I add two matrices together")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanIAddTwoMatricesTogether()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I add two matrices together", new string[] {
                        "matrixTests"});
#line 91
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table12.AddRow(new string[] {
                        "7",
                        "6"});
            table12.AddRow(new string[] {
                        "5",
                        "4"});
#line 92
 testRunner.Given("The following matrix", ((string)(null)), table12, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table13.AddRow(new string[] {
                        "-6",
                        "-3"});
            table13.AddRow(new string[] {
                        "0",
                        "3"});
#line 96
 testRunner.And("another matrix", ((string)(null)), table13, "And ");
#line 100
 testRunner.When("I add the two matrices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table14.AddRow(new string[] {
                        "1",
                        "3"});
            table14.AddRow(new string[] {
                        "5",
                        "7"});
#line 101
 testRunner.Then("the result should be", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I subtract one matrix from another")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanISubtractOneMatrixFromAnother()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I subtract one matrix from another", new string[] {
                        "matrixTests"});
#line 107
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table15.AddRow(new string[] {
                        "7",
                        "6"});
            table15.AddRow(new string[] {
                        "5",
                        "4"});
#line 108
 testRunner.Given("The following matrix", ((string)(null)), table15, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table16.AddRow(new string[] {
                        "2",
                        "3"});
            table16.AddRow(new string[] {
                        "1",
                        "-1"});
#line 112
 testRunner.And("another matrix", ((string)(null)), table16, "And ");
#line 116
 testRunner.When("I subtract the second matrix from the first", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table17.AddRow(new string[] {
                        "5",
                        "3"});
            table17.AddRow(new string[] {
                        "4",
                        "5"});
#line 117
 testRunner.Then("the result should be", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I multiply one matrix by a constant")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanIMultiplyOneMatrixByAConstant()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I multiply one matrix by a constant", new string[] {
                        "matrixTests"});
#line 123
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table18.AddRow(new string[] {
                        "1",
                        "-2"});
            table18.AddRow(new string[] {
                        "-1",
                        "3"});
#line 124
 testRunner.Given("The following matrix", ((string)(null)), table18, "Given ");
#line 128
 testRunner.When("I multiply the first matrix by the constant 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table19.AddRow(new string[] {
                        "3",
                        "-6"});
            table19.AddRow(new string[] {
                        "-3",
                        "9"});
#line 129
 testRunner.Then("the result should be", ((string)(null)), table19, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I multiply one matrix with another")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanIMultiplyOneMatrixWithAnother()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I multiply one matrix with another", new string[] {
                        "matrixTests"});
#line 135
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table20.AddRow(new string[] {
                        "7",
                        "6"});
            table20.AddRow(new string[] {
                        "5",
                        "4"});
#line 136
 testRunner.Given("The following matrix", ((string)(null)), table20, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table21.AddRow(new string[] {
                        "2",
                        "3"});
            table21.AddRow(new string[] {
                        "1",
                        "-1"});
#line 140
 testRunner.And("another matrix", ((string)(null)), table21, "And ");
#line 144
 testRunner.When("I multiply the first matrix by the second", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table22.AddRow(new string[] {
                        "20",
                        "15"});
            table22.AddRow(new string[] {
                        "14",
                        "11"});
#line 145
 testRunner.Then("the result should be", ((string)(null)), table22, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Extract a sub-matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void ExtractASub_Matrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extract a sub-matrix", new string[] {
                        "matrixTests"});
#line 151
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table23.AddRow(new string[] {
                        "1",
                        "2",
                        "3"});
            table23.AddRow(new string[] {
                        "0",
                        "4",
                        "5"});
            table23.AddRow(new string[] {
                        "1",
                        "0",
                        "6"});
#line 152
 testRunner.Given("The following matrix", ((string)(null)), table23, "Given ");
#line 157
 testRunner.When("I extract the submatrix of row 2 column 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table24.AddRow(new string[] {
                        "1",
                        "2"});
            table24.AddRow(new string[] {
                        "1",
                        "0"});
#line 158
 testRunner.Then("the result should be", ((string)(null)), table24, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the negative matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void GetTheNegativeMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the negative matrix", new string[] {
                        "matrixTests"});
#line 164
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table25.AddRow(new string[] {
                        "-1",
                        "0"});
            table25.AddRow(new string[] {
                        "2",
                        "-4"});
#line 165
 testRunner.Given("The following matrix", ((string)(null)), table25, "Given ");
#line 169
 testRunner.When("I negate the matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table26.AddRow(new string[] {
                        "1",
                        "0"});
            table26.AddRow(new string[] {
                        "-2",
                        "4"});
#line 170
 testRunner.Then("the result should be", ((string)(null)), table26, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Extract a minor matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void ExtractAMinorMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extract a minor matrix", new string[] {
                        "matrixTests"});
#line 176
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table27.AddRow(new string[] {
                        "1",
                        "2",
                        "3"});
            table27.AddRow(new string[] {
                        "0",
                        "4",
                        "5"});
            table27.AddRow(new string[] {
                        "1",
                        "0",
                        "6"});
#line 177
 testRunner.Given("The following matrix", ((string)(null)), table27, "Given ");
#line 182
 testRunner.When("I extract the minor matrix of column 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table28.AddRow(new string[] {
                        "0",
                        "5"});
            table28.AddRow(new string[] {
                        "1",
                        "6"});
#line 183
 testRunner.Then("the result should be", ((string)(null)), table28, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the cofactor")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CalculateTheCofactor()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the cofactor", new string[] {
                        "matrixTests"});
#line 189
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table29.AddRow(new string[] {
                        "1",
                        "2",
                        "3"});
            table29.AddRow(new string[] {
                        "0",
                        "4",
                        "5"});
            table29.AddRow(new string[] {
                        "1",
                        "0",
                        "6"});
#line 190
 testRunner.Given("The following matrix", ((string)(null)), table29, "Given ");
#line 195
 testRunner.When("I calculate the cofactor matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table30.AddRow(new string[] {
                        "24",
                        "5",
                        "-4"});
            table30.AddRow(new string[] {
                        "-12",
                        "3",
                        "2"});
            table30.AddRow(new string[] {
                        "-2",
                        "-5",
                        "4"});
#line 196
 testRunner.Then("the result should be", ((string)(null)), table30, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the determinant (2x2)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CalculateTheDeterminant2X2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the determinant (2x2)", new string[] {
                        "matrixTests"});
#line 203
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table31.AddRow(new string[] {
                        "7",
                        "6"});
            table31.AddRow(new string[] {
                        "5",
                        "4"});
#line 204
 testRunner.Given("The following matrix", ((string)(null)), table31, "Given ");
#line 208
 testRunner.When("I calculate the determinant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 209
 testRunner.Then("the result is -2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the determinant (4x4)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CalculateTheDeterminant4X4()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the determinant (4x4)", new string[] {
                        "matrixTests"});
#line 212
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4"});
            table32.AddRow(new string[] {
                        "3",
                        "2",
                        "0",
                        "1"});
            table32.AddRow(new string[] {
                        "4",
                        "0",
                        "1",
                        "2"});
            table32.AddRow(new string[] {
                        "3",
                        "0",
                        "2",
                        "1"});
            table32.AddRow(new string[] {
                        "9",
                        "2",
                        "3",
                        "1"});
#line 213
 testRunner.Given("The following matrix", ((string)(null)), table32, "Given ");
#line 219
 testRunner.When("I calculate the determinant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 220
 testRunner.Then("the result is 24", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the adjunct (2x2)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CalculateTheAdjunct2X2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the adjunct (2x2)", new string[] {
                        "matrixTests"});
#line 223
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table33.AddRow(new string[] {
                        "7",
                        "6"});
            table33.AddRow(new string[] {
                        "5",
                        "4"});
#line 224
 testRunner.Given("The following matrix", ((string)(null)), table33, "Given ");
#line 228
 testRunner.When("I calculate the adjunct matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table34.AddRow(new string[] {
                        "4",
                        "-6"});
            table34.AddRow(new string[] {
                        "-5",
                        "7"});
#line 229
 testRunner.Then("the result should be", ((string)(null)), table34, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the adjunct (3x3)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CalculateTheAdjunct3X3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the adjunct (3x3)", new string[] {
                        "matrixTests"});
#line 235
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table35.AddRow(new string[] {
                        "-3",
                        "2",
                        "-5"});
            table35.AddRow(new string[] {
                        "-1",
                        "0",
                        "-2"});
            table35.AddRow(new string[] {
                        "3",
                        "-4",
                        "1"});
#line 236
 testRunner.Given("The following matrix", ((string)(null)), table35, "Given ");
#line 241
 testRunner.When("I calculate the adjunct matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table36.AddRow(new string[] {
                        "-8",
                        "18",
                        "-4"});
            table36.AddRow(new string[] {
                        "-5",
                        "12",
                        "-1"});
            table36.AddRow(new string[] {
                        "4",
                        "-6",
                        "2"});
#line 242
 testRunner.Then("the result should be", ((string)(null)), table36, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the inverse matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CalculateTheInverseMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the inverse matrix", new string[] {
                        "matrixTests"});
#line 249
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table37.AddRow(new string[] {
                        "4",
                        "7"});
            table37.AddRow(new string[] {
                        "2",
                        "6"});
#line 250
 testRunner.Given("The following matrix", ((string)(null)), table37, "Given ");
#line 254
 testRunner.When("I calculate the inverse matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table38.AddRow(new string[] {
                        "0.6",
                        "-0.7"});
            table38.AddRow(new string[] {
                        "-0.2",
                        "0.4"});
#line 255
 testRunner.Then("the result should be", ((string)(null)), table38, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the inverse matrix (reverse check)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CalculateTheInverseMatrixReverseCheck()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the inverse matrix (reverse check)", new string[] {
                        "matrixTests"});
#line 261
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table39.AddRow(new string[] {
                        "4",
                        "7"});
            table39.AddRow(new string[] {
                        "2",
                        "6"});
#line 262
 testRunner.Given("The following matrix", ((string)(null)), table39, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table40.AddRow(new string[] {
                        "0.6",
                        "-0.7"});
            table40.AddRow(new string[] {
                        "-0.2",
                        "0.4"});
#line 266
 testRunner.And("another matrix", ((string)(null)), table40, "And ");
#line 270
 testRunner.When("I multiply the first matrix by the second", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 271
 testRunner.Then("the resulting matrix will be an identity matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate the inverse matrix (reverse check, fail)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CalculateTheInverseMatrixReverseCheckFail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the inverse matrix (reverse check, fail)", new string[] {
                        "matrixTests"});
#line 274
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table41.AddRow(new string[] {
                        "4",
                        "7"});
            table41.AddRow(new string[] {
                        "2",
                        "6"});
#line 275
 testRunner.Given("The following matrix", ((string)(null)), table41, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table42.AddRow(new string[] {
                        "0.6",
                        "-0.7"});
            table42.AddRow(new string[] {
                        "2",
                        "0.4"});
#line 279
 testRunner.And("another matrix", ((string)(null)), table42, "And ");
#line 283
 testRunner.When("I multiply the first matrix by the second", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 284
 testRunner.Then("the resulting matrix will not be an identity matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the lowest terms of a given matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void GetTheLowestTermsOfAGivenMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the lowest terms of a given matrix", new string[] {
                        "matrixTests"});
#line 287
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table43.AddRow(new string[] {
                        "-128",
                        "256"});
            table43.AddRow(new string[] {
                        "1024",
                        "-512"});
#line 288
 testRunner.Given("The following matrix", ((string)(null)), table43, "Given ");
#line 292
 testRunner.When("I get the lowest term matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table44.AddRow(new string[] {
                        "-1",
                        "2"});
            table44.AddRow(new string[] {
                        "8",
                        "-4"});
#line 293
 testRunner.Then("the result should be", ((string)(null)), table44, "Then ");
#line 297
 testRunner.And("the result is 128", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the lowest terms of a given matrix (2)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void GetTheLowestTermsOfAGivenMatrix2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the lowest terms of a given matrix (2)", new string[] {
                        "matrixTests"});
#line 300
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table45.AddRow(new string[] {
                        "-12",
                        "24"});
            table45.AddRow(new string[] {
                        "36",
                        "-48"});
#line 301
 testRunner.Given("The following matrix", ((string)(null)), table45, "Given ");
#line 305
 testRunner.When("I get the lowest term matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table46.AddRow(new string[] {
                        "-1",
                        "2"});
            table46.AddRow(new string[] {
                        "3",
                        "-4"});
#line 306
 testRunner.Then("the result should be", ((string)(null)), table46, "Then ");
#line 310
 testRunner.And("the result is 12", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the lowest terms of a given matrix (no change)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void GetTheLowestTermsOfAGivenMatrixNoChange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the lowest terms of a given matrix (no change)", new string[] {
                        "matrixTests"});
#line 313
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table47.AddRow(new string[] {
                        "-4",
                        "7"});
            table47.AddRow(new string[] {
                        "2",
                        "-6"});
#line 314
 testRunner.Given("The following matrix", ((string)(null)), table47, "Given ");
#line 318
 testRunner.When("I get the lowest term matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table48.AddRow(new string[] {
                        "-4",
                        "7"});
            table48.AddRow(new string[] {
                        "2",
                        "-6"});
#line 319
 testRunner.Then("the result should be", ((string)(null)), table48, "Then ");
#line 323
 testRunner.And("the result is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Eigen value of a 2x2 matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void GetEigenValueOfA2X2Matrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Eigen value of a 2x2 matrix", new string[] {
                        "matrixTests"});
#line 326
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table49.AddRow(new string[] {
                        "2",
                        "4"});
            table49.AddRow(new string[] {
                        "3",
                        "13"});
#line 327
 testRunner.Given("The following matrix", ((string)(null)), table49, "Given ");
#line 331
 testRunner.When("I get the Eigen value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 332
 testRunner.Then("the Eigen values are 1 and 14", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Eigen vectors of a 2x2 matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void GetEigenVectorsOfA2X2Matrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Eigen vectors of a 2x2 matrix", new string[] {
                        "matrixTests"});
#line 335
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table50.AddRow(new string[] {
                        "3",
                        "5"});
            table50.AddRow(new string[] {
                        "-2",
                        "-4"});
#line 336
 testRunner.Given("The following matrix", ((string)(null)), table50, "Given ");
#line 340
 testRunner.When("I get the Eigen vectors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "V"});
            table51.AddRow(new string[] {
                        "5"});
            table51.AddRow(new string[] {
                        "-2"});
#line 341
 testRunner.Then("the Eigen vector is", ((string)(null)), table51, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "V"});
            table52.AddRow(new string[] {
                        "1"});
            table52.AddRow(new string[] {
                        "-1"});
#line 345
 testRunner.And("the other vector is", ((string)(null)), table52, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can raise a matrix to a power")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRaiseAMatrixToAPower()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can raise a matrix to a power", new string[] {
                        "matrixTests"});
#line 351
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table53.AddRow(new string[] {
                        "1",
                        "2"});
            table53.AddRow(new string[] {
                        "-1",
                        "1"});
#line 352
 testRunner.Given("The following matrix", ((string)(null)), table53, "Given ");
#line 356
 testRunner.When("I raise the matrix to the power of 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table54.AddRow(new string[] {
                        "-5",
                        "2"});
            table54.AddRow(new string[] {
                        "-1",
                        "-5"});
#line 357
 testRunner.Then("the result should be", ((string)(null)), table54, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can raise a matrix to the power of -1")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRaiseAMatrixToThePowerOf_1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can raise a matrix to the power of -1", new string[] {
                        "matrixTests"});
#line 363
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table55.AddRow(new string[] {
                        "4",
                        "7"});
            table55.AddRow(new string[] {
                        "2",
                        "6"});
#line 364
 testRunner.Given("The following matrix", ((string)(null)), table55, "Given ");
#line 368
 testRunner.When("I raise the matrix to the power of -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table56.AddRow(new string[] {
                        "0.6",
                        "-0.7"});
            table56.AddRow(new string[] {
                        "-0.2",
                        "0.4"});
#line 369
 testRunner.Then("the result should be", ((string)(null)), table56, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can raise an identity matrix to a power")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRaiseAnIdentityMatrixToAPower()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can raise an identity matrix to a power", new string[] {
                        "matrixTests"});
#line 375
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table57.AddRow(new string[] {
                        "1",
                        "0",
                        "0"});
            table57.AddRow(new string[] {
                        "0",
                        "1",
                        "0"});
            table57.AddRow(new string[] {
                        "0",
                        "0",
                        "1"});
#line 376
 testRunner.Given("The following matrix", ((string)(null)), table57, "Given ");
#line 381
 testRunner.When("I raise the matrix to the power of 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table58.AddRow(new string[] {
                        "1",
                        "0",
                        "0"});
            table58.AddRow(new string[] {
                        "0",
                        "1",
                        "0"});
            table58.AddRow(new string[] {
                        "0",
                        "0",
                        "1"});
#line 382
 testRunner.Then("the result should be", ((string)(null)), table58, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can raise a diagonal matrix to a power")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRaiseADiagonalMatrixToAPower()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can raise a diagonal matrix to a power", new string[] {
                        "matrixTests"});
#line 389
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table59.AddRow(new string[] {
                        "3",
                        "0",
                        "0"});
            table59.AddRow(new string[] {
                        "0",
                        "-2",
                        "0"});
            table59.AddRow(new string[] {
                        "0",
                        "0",
                        "2"});
#line 390
 testRunner.Given("The following matrix", ((string)(null)), table59, "Given ");
#line 395
 testRunner.When("I raise the matrix to the power of 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table60.AddRow(new string[] {
                        "27",
                        "0",
                        "0"});
            table60.AddRow(new string[] {
                        "0",
                        "-8",
                        "0"});
            table60.AddRow(new string[] {
                        "0",
                        "0",
                        "8"});
#line 396
 testRunner.Then("the result should be", ((string)(null)), table60, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I divide one matrix with another")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanIDivideOneMatrixWithAnother()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I divide one matrix with another", new string[] {
                        "matrixTests"});
#line 403
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table61.AddRow(new string[] {
                        "20",
                        "15"});
            table61.AddRow(new string[] {
                        "14",
                        "11"});
#line 404
 testRunner.Given("The following matrix", ((string)(null)), table61, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table62.AddRow(new string[] {
                        "7",
                        "6"});
            table62.AddRow(new string[] {
                        "5",
                        "4"});
#line 408
 testRunner.And("another matrix", ((string)(null)), table62, "And ");
#line 412
 testRunner.When("I divide the first matrix by the second", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table63.AddRow(new string[] {
                        "2",
                        "3"});
            table63.AddRow(new string[] {
                        "1",
                        "-1"});
#line 413
 testRunner.Then("the result should be", ((string)(null)), table63, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a diagonal matrix (pass)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRecogniseADiagonalMatrixPass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a diagonal matrix (pass)", new string[] {
                        "matrixTests"});
#line 419
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table64.AddRow(new string[] {
                        "3",
                        "0",
                        "0"});
            table64.AddRow(new string[] {
                        "0",
                        "-2",
                        "0"});
            table64.AddRow(new string[] {
                        "0",
                        "0",
                        "2"});
#line 420
 testRunner.Given("The following matrix", ((string)(null)), table64, "Given ");
#line 425
 testRunner.When("check to see if the matrix is diagonal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 426
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a diagonal matrix (fail)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRecogniseADiagonalMatrixFail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a diagonal matrix (fail)", new string[] {
                        "matrixTests"});
#line 429
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table65.AddRow(new string[] {
                        "3",
                        "0",
                        "0"});
            table65.AddRow(new string[] {
                        "0",
                        "-2",
                        "0"});
            table65.AddRow(new string[] {
                        "1",
                        "0",
                        "2"});
#line 430
 testRunner.Given("The following matrix", ((string)(null)), table65, "Given ");
#line 435
 testRunner.When("check to see if the matrix is diagonal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 436
 testRunner.Then("the result will be False", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a scalar matrix (pass)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRecogniseAScalarMatrixPass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a scalar matrix (pass)", new string[] {
                        "matrixTests"});
#line 439
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table66.AddRow(new string[] {
                        "4",
                        "0",
                        "0"});
            table66.AddRow(new string[] {
                        "0",
                        "4",
                        "0"});
            table66.AddRow(new string[] {
                        "0",
                        "0",
                        "4"});
#line 440
 testRunner.Given("The following matrix", ((string)(null)), table66, "Given ");
#line 445
 testRunner.When("check to see if the matrix is scalar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 446
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a scalar matrix (fail1)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRecogniseAScalarMatrixFail1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a scalar matrix (fail1)", new string[] {
                        "matrixTests"});
#line 449
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table67.AddRow(new string[] {
                        "4",
                        "0",
                        "0"});
            table67.AddRow(new string[] {
                        "0",
                        "4",
                        "0"});
            table67.AddRow(new string[] {
                        "0",
                        "0",
                        "6"});
#line 450
 testRunner.Given("The following matrix", ((string)(null)), table67, "Given ");
#line 455
 testRunner.When("check to see if the matrix is scalar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 456
 testRunner.Then("the result will be False", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a scalar matrix (fail2)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRecogniseAScalarMatrixFail2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a scalar matrix (fail2)", new string[] {
                        "matrixTests"});
#line 459
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table68.AddRow(new string[] {
                        "3",
                        "0",
                        "0"});
            table68.AddRow(new string[] {
                        "0",
                        "3",
                        "0"});
            table68.AddRow(new string[] {
                        "1",
                        "0",
                        "3"});
#line 460
 testRunner.Given("The following matrix", ((string)(null)), table68, "Given ");
#line 465
 testRunner.When("check to see if the matrix is scalar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 466
 testRunner.Then("the result will be False", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a involution matrix (pass)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRecogniseAInvolutionMatrixPass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a involution matrix (pass)", new string[] {
                        "matrixTests"});
#line 469
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table69.AddRow(new string[] {
                        "4",
                        "-1"});
            table69.AddRow(new string[] {
                        "15",
                        "-4"});
#line 470
 testRunner.Given("The following matrix", ((string)(null)), table69, "Given ");
#line 474
 testRunner.When("check to see if the matrix is involution", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 475
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a nilpotent matrix for an index (pass)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRecogniseANilpotentMatrixForAnIndexPass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a nilpotent matrix for an index (pass)", new string[] {
                        "matrixTests"});
#line 478
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table70.AddRow(new string[] {
                        "5",
                        "-3",
                        "2"});
            table70.AddRow(new string[] {
                        "15",
                        "-9",
                        "6"});
            table70.AddRow(new string[] {
                        "10",
                        "-6",
                        "4"});
#line 479
 testRunner.Given("The following matrix", ((string)(null)), table70, "Given ");
#line 484
 testRunner.And("the index is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 485
 testRunner.When("check to see if the matrix is nilpotent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 486
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a nilpotent matrix for all indecise (pass)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRecogniseANilpotentMatrixForAllIndecisePass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a nilpotent matrix for all indecise (pass)", new string[] {
                        "matrixTests"});
#line 489
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4"});
            table71.AddRow(new string[] {
                        "0",
                        "2",
                        "1",
                        "6"});
            table71.AddRow(new string[] {
                        "0",
                        "0",
                        "1",
                        "2"});
            table71.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "3"});
            table71.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
#line 490
 testRunner.Given("The following matrix", ((string)(null)), table71, "Given ");
#line 496
 testRunner.When("check to see if the matrix is nilpotent for all", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 497
 testRunner.Then("the result will be True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a triangular matrix and return its type (fail)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRecogniseATriangularMatrixAndReturnItsTypeFail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a triangular matrix and return its type (fail)", new string[] {
                        "matrixTests"});
#line 500
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4"});
            table72.AddRow(new string[] {
                        "0",
                        "2",
                        "1",
                        "6"});
            table72.AddRow(new string[] {
                        "0",
                        "0",
                        "1",
                        "2"});
            table72.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "3"});
            table72.AddRow(new string[] {
                        "1",
                        "0",
                        "0",
                        "0"});
#line 501
 testRunner.Given("The following matrix", ((string)(null)), table72, "Given ");
#line 507
 testRunner.When("check to see if the matrix is triangular", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 508
 testRunner.Then("the matrix type will be Not Triangular", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a triangular matrix and return its type (upper)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRecogniseATriangularMatrixAndReturnItsTypeUpper()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a triangular matrix and return its type (upper)", new string[] {
                        "matrixTests"});
#line 511
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4"});
            table73.AddRow(new string[] {
                        "0",
                        "2",
                        "1",
                        "6"});
            table73.AddRow(new string[] {
                        "0",
                        "0",
                        "1",
                        "2"});
            table73.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "3"});
            table73.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
#line 512
 testRunner.Given("The following matrix", ((string)(null)), table73, "Given ");
#line 518
 testRunner.When("check to see if the matrix is triangular", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 519
 testRunner.Then("the matrix type will be Upper", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can recognise a triangular matrix and return its type (lower)")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanRecogniseATriangularMatrixAndReturnItsTypeLower()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can recognise a triangular matrix and return its type (lower)", new string[] {
                        "matrixTests"});
#line 522
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4"});
            table74.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "0"});
            table74.AddRow(new string[] {
                        "3",
                        "0",
                        "0",
                        "0"});
            table74.AddRow(new string[] {
                        "5",
                        "6",
                        "0",
                        "0"});
            table74.AddRow(new string[] {
                        "2",
                        "-1",
                        "3",
                        "0"});
#line 523
 testRunner.Given("The following matrix", ((string)(null)), table74, "Given ");
#line 529
 testRunner.When("check to see if the matrix is triangular", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 530
 testRunner.Then("the matrix type will be Lower", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the trace of a given matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void GetTheTraceOfAGivenMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the trace of a given matrix", new string[] {
                        "matrixTests"});
#line 533
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table75.AddRow(new string[] {
                        "-4",
                        "7"});
            table75.AddRow(new string[] {
                        "2",
                        "-6"});
#line 534
 testRunner.Given("The following matrix", ((string)(null)), table75, "Given ");
#line 538
 testRunner.When("I get the trace of the matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 539
 testRunner.Then("the result is -10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I join a matrix to an identity matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanIJoinAMatrixToAnIdentityMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I join a matrix to an identity matrix", new string[] {
                        "matrixTests"});
#line 542
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table76.AddRow(new string[] {
                        "20",
                        "15"});
            table76.AddRow(new string[] {
                        "14",
                        "11"});
#line 543
 testRunner.Given("The following matrix", ((string)(null)), table76, "Given ");
#line 547
 testRunner.When("I join the matrix to an identity matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4"});
            table77.AddRow(new string[] {
                        "20",
                        "15",
                        "1",
                        "0"});
            table77.AddRow(new string[] {
                        "14",
                        "11",
                        "0",
                        "1"});
#line 548
 testRunner.Then("the result should be", ((string)(null)), table77, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I extract a matrix from the left half of a matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanIExtractAMatrixFromTheLeftHalfOfAMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I extract a matrix from the left half of a matrix", new string[] {
                        "matrixTests"});
#line 554
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4"});
            table78.AddRow(new string[] {
                        "2",
                        "5",
                        "1",
                        "4"});
            table78.AddRow(new string[] {
                        "4",
                        "1",
                        "7",
                        "3"});
#line 555
 testRunner.Given("The following matrix", ((string)(null)), table78, "Given ");
#line 559
 testRunner.When("I extract a left matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table79.AddRow(new string[] {
                        "2",
                        "5"});
            table79.AddRow(new string[] {
                        "4",
                        "1"});
#line 560
 testRunner.Then("the result should be", ((string)(null)), table79, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I extract a matrix from the right half of a matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanIExtractAMatrixFromTheRightHalfOfAMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I extract a matrix from the right half of a matrix", new string[] {
                        "matrixTests"});
#line 566
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4"});
            table80.AddRow(new string[] {
                        "2",
                        "5",
                        "1",
                        "4"});
            table80.AddRow(new string[] {
                        "4",
                        "1",
                        "7",
                        "3"});
#line 567
 testRunner.Given("The following matrix", ((string)(null)), table80, "Given ");
#line 571
 testRunner.When("I extract a right matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table81.AddRow(new string[] {
                        "1",
                        "4"});
            table81.AddRow(new string[] {
                        "7",
                        "3"});
#line 572
 testRunner.Then("the result should be", ((string)(null)), table81, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I create a matrix from a string 1")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanICreateAMatrixFromAString1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I create a matrix from a string 1", new string[] {
                        "matrixTests"});
#line 578
this.ScenarioSetup(scenarioInfo);
#line 579
 testRunner.Given("The string \"[ 1, 4, -2 ; 7, 3, 5]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 580
 testRunner.When("I convert the string to a matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table82.AddRow(new string[] {
                        "1",
                        "4",
                        "-2"});
            table82.AddRow(new string[] {
                        "7",
                        "3",
                        "5"});
#line 581
 testRunner.Then("the result should be", ((string)(null)), table82, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I create a matrix from a string 2")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanICreateAMatrixFromAString2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I create a matrix from a string 2", new string[] {
                        "matrixTests"});
#line 587
this.ScenarioSetup(scenarioInfo);
#line 588
 testRunner.Given("The string \"[ 1, 4 ; -2, 7 ; 3, 5]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 589
 testRunner.When("I convert the string to a matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table83.AddRow(new string[] {
                        "1",
                        "4"});
            table83.AddRow(new string[] {
                        "-2",
                        "7"});
            table83.AddRow(new string[] {
                        "3",
                        "5"});
#line 590
 testRunner.Then("the result should be", ((string)(null)), table83, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I find the square root of a 2x2 matrix")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanIFindTheSquareRootOfA2X2Matrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I find the square root of a 2x2 matrix", new string[] {
                        "matrixTests"});
#line 597
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table84.AddRow(new string[] {
                        "33",
                        "24"});
            table84.AddRow(new string[] {
                        "48",
                        "57"});
#line 598
 testRunner.Given("The following matrix", ((string)(null)), table84, "Given ");
#line 602
 testRunner.When("I calculate the square roots of the matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table85.AddRow(new string[] {
                        "5",
                        "2"});
            table85.AddRow(new string[] {
                        "4",
                        "7"});
#line 603
 testRunner.Then("one root should be", ((string)(null)), table85, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table86.AddRow(new string[] {
                        "1",
                        "4"});
            table86.AddRow(new string[] {
                        "8",
                        "5"});
#line 607
 testRunner.And("one root should be", ((string)(null)), table86, "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table87.AddRow(new string[] {
                        "-5",
                        "-2"});
            table87.AddRow(new string[] {
                        "-4",
                        "-7"});
#line 611
 testRunner.And("one root should be", ((string)(null)), table87, "And ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2"});
            table88.AddRow(new string[] {
                        "-1",
                        "-4"});
            table88.AddRow(new string[] {
                        "-8",
                        "-5"});
#line 615
 testRunner.And("one root should be", ((string)(null)), table88, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I find the Reduced Row Echelon Form of a matrix 1")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanIFindTheReducedRowEchelonFormOfAMatrix1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I find the Reduced Row Echelon Form of a matrix 1", new string[] {
                        "matrixTests"});
#line 621
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4",
                        "C5"});
            table89.AddRow(new string[] {
                        "-1",
                        "1",
                        "1",
                        "1",
                        "7"});
            table89.AddRow(new string[] {
                        "2",
                        "-1",
                        "0",
                        "0",
                        "1"});
            table89.AddRow(new string[] {
                        "2",
                        "-2",
                        "1",
                        "0",
                        "-7"});
            table89.AddRow(new string[] {
                        "-3",
                        "1",
                        "1",
                        "1",
                        "1"});
#line 622
 testRunner.Given("The following matrix", ((string)(null)), table89, "Given ");
#line 628
 testRunner.When("I calculate the RREF", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4",
                        "C5"});
            table90.AddRow(new string[] {
                        "1",
                        "0",
                        "0",
                        "0",
                        "3"});
            table90.AddRow(new string[] {
                        "0",
                        "1",
                        "0",
                        "0",
                        "5"});
            table90.AddRow(new string[] {
                        "0",
                        "0",
                        "1",
                        "0",
                        "-3"});
            table90.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "1",
                        "8"});
#line 629
 testRunner.Then("the result should be", ((string)(null)), table90, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I find the Reduced Row Echelon Form of a matrix 2")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanIFindTheReducedRowEchelonFormOfAMatrix2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I find the Reduced Row Echelon Form of a matrix 2", new string[] {
                        "matrixTests"});
#line 637
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4",
                        "C5"});
            table91.AddRow(new string[] {
                        "2",
                        "3",
                        "5",
                        "1",
                        "7"});
            table91.AddRow(new string[] {
                        "5",
                        "0",
                        "2",
                        "2",
                        "-1"});
            table91.AddRow(new string[] {
                        "7",
                        "1",
                        "1",
                        "1",
                        "0"});
            table91.AddRow(new string[] {
                        "3",
                        "1",
                        "3",
                        "1",
                        "0"});
#line 638
 testRunner.Given("The following matrix", ((string)(null)), table91, "Given ");
#line 644
 testRunner.When("I calculate the RREF", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4",
                        "C5"});
            table92.AddRow(new string[] {
                        "1",
                        "0",
                        "0",
                        "0",
                        "-1"});
            table92.AddRow(new string[] {
                        "0",
                        "1",
                        "0",
                        "0",
                        "5"});
            table92.AddRow(new string[] {
                        "0",
                        "0",
                        "1",
                        "0",
                        "-2"});
            table92.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "1",
                        "4"});
#line 645
 testRunner.Then("the result should be", ((string)(null)), table92, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I find the Reduced Row Echelon Form of a matrix 3")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanIFindTheReducedRowEchelonFormOfAMatrix3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I find the Reduced Row Echelon Form of a matrix 3", new string[] {
                        "matrixTests"});
#line 654
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table93.AddRow(new string[] {
                        "2",
                        "-3",
                        "-1"});
            table93.AddRow(new string[] {
                        "-1",
                        "2",
                        "-1"});
#line 655
 testRunner.Given("The following matrix", ((string)(null)), table93, "Given ");
#line 659
 testRunner.When("I calculate the RREF", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table94.AddRow(new string[] {
                        "1",
                        "0",
                        "-5"});
            table94.AddRow(new string[] {
                        "0",
                        "1",
                        "-3"});
#line 660
 testRunner.Then("the result should be", ((string)(null)), table94, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can I find the Reduced Row Echelon Form of a matrix and a vector")]
        [NUnit.Framework.CategoryAttribute("matrixTests")]
        public virtual void CanIFindTheReducedRowEchelonFormOfAMatrixAndAVector()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can I find the Reduced Row Echelon Form of a matrix and a vector", new string[] {
                        "matrixTests"});
#line 666
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4"});
            table95.AddRow(new string[] {
                        "-1",
                        "1",
                        "1",
                        "1"});
            table95.AddRow(new string[] {
                        "2",
                        "-1",
                        "0",
                        "0"});
            table95.AddRow(new string[] {
                        "2",
                        "-2",
                        "1",
                        "0"});
            table95.AddRow(new string[] {
                        "-3",
                        "1",
                        "1",
                        "1"});
#line 667
 testRunner.Given("The following matrix", ((string)(null)), table95, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1"});
            table96.AddRow(new string[] {
                        "7"});
            table96.AddRow(new string[] {
                        "1"});
            table96.AddRow(new string[] {
                        "-7"});
            table96.AddRow(new string[] {
                        "1"});
#line 673
 testRunner.When("I augment the matrix with the following vector", ((string)(null)), table96, "When ");
#line 679
 testRunner.And("I calculate the RREF", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3",
                        "C4",
                        "C5"});
            table97.AddRow(new string[] {
                        "1",
                        "0",
                        "0",
                        "0",
                        "3"});
            table97.AddRow(new string[] {
                        "0",
                        "1",
                        "0",
                        "0",
                        "5"});
            table97.AddRow(new string[] {
                        "0",
                        "0",
                        "1",
                        "0",
                        "-3"});
            table97.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "1",
                        "8"});
#line 680
 testRunner.Then("the result should be", ((string)(null)), table97, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Find the highestMagnitude number in a matrix")]
        [NUnit.Framework.CategoryAttribute("MatrixTests")]
        public virtual void FindTheHighestMagnitudeNumberInAMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find the highestMagnitude number in a matrix", new string[] {
                        "MatrixTests"});
#line 688
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "C1",
                        "C2",
                        "C3"});
            table98.AddRow(new string[] {
                        "-1",
                        "2",
                        "-4"});
            table98.AddRow(new string[] {
                        "2",
                        "3",
                        "-7"});
            table98.AddRow(new string[] {
                        "-10",
                        "7",
                        "5"});
#line 689
 testRunner.Given("The following matrix", ((string)(null)), table98, "Given ");
#line 694
 testRunner.When("I Find Highest magnitude Element In the Matrix", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 695
 testRunner.Then("the result is 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
